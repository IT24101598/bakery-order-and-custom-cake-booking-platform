package com.example.bakery.controller;

import com.example.bakery.constants.Constant;
import com.example.bakery.model.Cake;
import com.example.bakery.service.CakeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.nio.file.*;
import java.util.List;

@Controller
@RequestMapping("/cake")
public class CakeController {

    private static final String IMAGE_DIR = Constant.IMAGE_DIR;

    @Autowired
    private CakeService cakeService;

    // Part 1: Show Add Cake Form
    @GetMapping("/add")
    public String showAddForm(Model model) {
        Cake cake = new Cake();
        cake.setId(cakeService.getNextId());
        model.addAttribute("cake", cake);
        return "add-cake";
    }

    // Part 2: Add New Cake with Image
    @PostMapping("/add")
    public String addCake(@ModelAttribute Cake cake,
                          @RequestParam("image") MultipartFile image,
                          Model model) {
        try {
            if (!image.isEmpty()) {
                String fileName = StringUtils.cleanPath(image.getOriginalFilename());
                Path uploadPath = Paths.get(IMAGE_DIR);

                if (!Files.exists(uploadPath)) {
                    Files.createDirectories(uploadPath);
                }

                String newFileName = cake.getId() + "_" + fileName;
                Path filePath = uploadPath.resolve(newFileName);
                Files.copy(image.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

                cake.setImagePath("/images/" + newFileName);
            }

            cakeService.addCake(cake);
            return "redirect:/cake/admin";
        } catch (IOException e) {
            model.addAttribute("error", "Error uploading image");
            return "add-cake";
        }
    }

    // Part 3: Show Cake List to Customers
    @GetMapping("/cakeList")
    public String showCake(Model model) {
        List<Cake> cakeList = cakeService.getSortedByPrice();
        model.addAttribute("cake", cakeList);
        return "cakeList";
    }

    // Part 4: Show Cake List to Admin
    @GetMapping("/admin")
    public String listCake(Model model) {
        List<Cake> cakeList = cakeService.getSortedByPrice();
        model.addAttribute("cake", cakeList);
        return "admin-cake";
    }

    // Part 5: Delete a Cake
    @PostMapping("/delete/{id}")
    public String deleteCake(@PathVariable String id) {
        cakeService.deleteById(id);
        return "redirect:/cake/admin";
    }

    // Part 6: Show Update Cake Form
    @GetMapping("/update/{id}")
    public String showUpdateForm(@PathVariable String id, Model model) {
        Cake cake = cakeService.getById(id);
        model.addAttribute("cake", cake);
        return "update-cake";
    }

    // Part 7: Update Cake Info and Image
    @PostMapping("/update")
    public String updateCake(@ModelAttribute Cake cake,
                             @RequestParam("image") MultipartFile image,
                             Model model) {
        try {
            String imagePath = cake.getImagePath();

            if (image != null && !image.isEmpty()) {
                String fileName = StringUtils.cleanPath(image.getOriginalFilename());
                Path uploadPath = Paths.get(IMAGE_DIR);

                if (!Files.exists(uploadPath)) {
                    Files.createDirectories(uploadPath);
                }

                String newFileName = cake.getId() + "_" + fileName;
                Path filePath = uploadPath.resolve(newFileName);
                Files.copy(image.getInputStream(), filePath, StandardCopyOption.REPLACE_EXISTING);

                imagePath = "/images/" + newFileName;
            }

            cake.setImagePath(imagePath);
            cakeService.updateCake(cake);
            return "redirect:/cake/admin";

        } catch (IOException e) {
            model.addAttribute("error", "Error uploading image: " + e.getMessage());
            return "update-cake";
        }
    }

    // Part 8: Buy Cake (API Call with JSON)
    @PostMapping("/buy")
    @ResponseBody
    public String buyCake(@RequestBody PurchaseRequest purchase) {
        Cake cake = cakeService.getById(purchase.getId());

        if (cake != null && cake.getQuantity() >= purchase.getQuantity()) {
            cake.setQuantity(cake.getQuantity() - purchase.getQuantity());
            cakeService.updateCake(cake);
            return "OK";
        }

        return "ERROR";
    }

    // Inner class to handle JSON purchase data
    public static class PurchaseRequest {
        private String id;
        private int quantity;

        public String getId() { return id; }
        public void setId(String id) { this.id = id; }

        public int getQuantity() { return quantity; }
        public void setQuantity(int quantity) { this.quantity = quantity; }
    }
}
